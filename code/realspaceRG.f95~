   program realspaceRG
      use debugging
      use quantum
      use manybodyQS
      implicit none
      integer :: DD,NN,count,status,ii,jj,info,lwork,lda,kk,hh,zz,N_lam
      logical :: debug,printer
      double precision :: lambda,gs,gs_old,threshold
      double complex, dimension(:), allocatable ::work
      double complex, dimension(:,:),allocatable :: hamiltonian,temp,projector,red_ham,sigmax,id_small,id_big,temp_left,temp_right
      double precision, dimension(:,:), allocatable :: levels,der1,der2
      double precision, dimension(:),allocatable :: w,rwork
      character*20:: file_name
      real :: start,finish1,finish2
      count=0

      open(10,file="temp/debugging.txt",status='unknown')
      read(10,*) debug, printer
      close(10)
      open(10,file="temp/parameters.txt",status='unknown')
      read(10,*)  NN,DD,N_lam,kk
      close(10)


      !Vectors for diagonalization
      lda=max(1,DD**(2*NN))
      lwork=max(1,2*DD**(2*NN)-1)
      allocate(w(DD**(2*NN)))
      allocate(work(lwork))
      allocate(rwork(max(1,3*DD**(2*NN)-2)))
      
      !Initialize identities a Pauli matrix sigmax
      call init_identity(id_big,DD,2*NN-1)
      call init_identity(id_small,DD,NN)
      call init_sigmax(sigmax)

      !Temporary matrices for real space RG
      allocate(temp(DD**(2*NN),DD**(2*NN)),stat=status) 
      call check_allocation(status,debug,printer)
      allocate(temp_left(DD**NN,DD**NN),stat=status)
      call check_allocation(status,debug,printer)
      allocate(temp_right(DD**NN,DD**NN),stat=status)
      call check_allocation(status,debug,printer)
      allocate(projector(DD**(2*NN),DD**NN),stat=status) !projector
      call check_allocation(status,debug,printer)
      allocate(red_ham(DD**NN,DD**NN),stat=status) !reduce hamiltonian
      call check_allocation(status,debug,printer)
      
      open(12,file="data/ground_state.txt",status='unknown')
      do zz=1,N_lam
         !Initialize hamiltonian,eigenvectors,projector and reduced hamiltonian
         lambda=5/dble(N_lam)*(zz-1)
         call init_ising_hamiltonian(hamiltonian,DD,2*NN,lambda,status,count)
         call check_allocation(status,debug,printer)
         
         !Real space RG algorithm
         !Fix  the threshold
         threshold=0.0000001
         gs=1
         gs_old=0
         ii=1
         do while(abs(gs-gs_old)>threshold)
            print *, "Dimension", NN*2**ii
            if(ii==1) then
               gs_old=0
            else
               gs_old=w(1)/(NN*2**(ii-1))
            endif
            
            !Diagonalize the Hamiltonian
            temp=hamiltonian
            call zheev('V','U',DD**(2*NN),temp,lda,w,work,lwork,rwork,info)
            call check_eigen(info,debug,printer,count)
            gs=w(1)/(NN*2**ii) 
            !Save first  D**N eigenvectors in projector
            do hh=1,DD**NN
               projector(:,hh)=temp(:,hh)
            enddo           
            !Project the hamiltonian
            red_ham=matmul(transpose(conjg(projector)),matmul(hamiltonian,projector))      
            !Double the system again. First left part
            call matrix_tens_product(red_ham,DD**NN,id_small,DD**NN,temp,DD**(2*NN),count)
            hamiltonian=temp
            !Right part
            call matrix_tens_product(id_small,DD**NN,red_ham,DD**NN,temp,DD**(2*NN),count)
            hamiltonian=hamiltonian+temp
            !Interaction part
            call matrix_tens_product(id_big,DD**(2*NN-1),sigmax,DD,temp,DD**(2*NN),count)
            temp_left=matmul(transpose(conjg(projector)),matmul(temp,projector))
            call matrix_tens_product(sigmax,DD,id_big,DD**(2*NN-1),temp,DD**(2*NN),count)
            temp_right=matmul(transpose(conjg(projector)),matmul(temp,projector))
            call matrix_tens_product(temp_left,DD**NN,temp_right,DD**NN,temp,DD**(2*NN),count)
            hamiltonian=hamiltonian+temp              
            ii=ii+1
         enddo
         deallocate(hamiltonian)
         write(12,*) lambda,(w(hh)/(NN*2**(ii-1)),hh=1,kk)
      enddo

      close(12)
      
      !Free memory
      deallocate(w,work,rwork,id_big,id_small,sigmax,temp,temp_left,temp_right,projector,red_ham)
            
      print *, "Total number of errors:", count

    end program realspaceRG
    
    

      
